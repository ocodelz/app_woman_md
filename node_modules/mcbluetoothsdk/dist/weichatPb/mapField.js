"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};module.exports=MapField;var types,util,Field=require("./field");function MapField(e,t,o,i,r,p){if(Field.call(this,e,t,i,void 0,void 0,r,p),!util.isString(o))throw TypeError("keyType must be a string");this.keyType=o,this.resolvedKeyType=null,this.map=!0}((MapField.prototype=Object.create(Field.prototype)).constructor=MapField).className="MapField",MapField.fromJSON=function(e,t){return new MapField(e,t.id,t.keyType,t.type,t.options,t.comment)},MapField.prototype.toJSON=function(e){var t=!!e&&Boolean(e.keepComments);return util.toObject(["keyType",this.keyType,"type",this.type,"id",this.id,"extend",this.extend,"options",this.options,"comment",t?this.comment:void 0])},MapField.prototype.resolve=function(){if(this.resolved)return this;if(void 0===types.mapKey[this.keyType])throw Error("invalid key type: "+this.keyType);return Field.prototype.resolve.call(this)},MapField.d=function(o,i,r){return"function"==typeof r?r=util.decorateType(r).name:r&&"object"===(void 0===r?"undefined":_typeof(r))&&(r=util.decorateEnum(r).name),function(e,t){util.decorateType(e.constructor).add(new MapField(t,o,i,r))}},MapField._configure=function(){types=require("./types"),util=require("./util")};