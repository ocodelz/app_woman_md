"use strict";var Enum,util,_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function invalid(e,i){return e.name+": "+i+(e.repeated&&"array"!==i?"[]":e.map&&"object"!==i?"{k:"+e.keyType+"}":"")+" expected"}function verifyValue(e,i,r,t){var n=t.types;if(e.resolvedType)if(e.resolvedType instanceof Enum){if(Object.keys(e.resolvedType.values).indexOf(r)<0)return invalid(e,"enum value")}else{var a=n[i].verify(r);if(a)return e.name+"."+a}else switch(e.type){case"int32":case"uint32":case"sint32":case"fixed32":case"sfixed32":if(!util.isInteger(r))return invalid(e,"integer");break;case"int64":case"uint64":case"sint64":case"fixed64":case"sfixed64":if(!(util.isInteger(r)||r&&util.isInteger(r.low)&&util.isInteger(r.high)))return invalid(e,"integer|Long");break;case"float":case"double":if("number"!=typeof r)return invalid(e,"number");break;case"bool":if("boolean"!=typeof r)return invalid(e,"boolean");break;case"string":if(!util.isString(r))return invalid(e,"string");break;case"bytes":if(!(r&&"number"==typeof r.length||util.isString(r)))return invalid(e,"buffer")}}function verifyKey(e,i){switch(e.keyType){case"int32":case"uint32":case"sint32":case"fixed32":case"sfixed32":if(!util.key32Re.test(i))return invalid(e,"integer key");break;case"int64":case"uint64":case"sint64":case"fixed64":case"sfixed64":if(!util.key64Re.test(i))return invalid(e,"integer|Long key");break;case"bool":if(!util.key2Re.test(i))return invalid(e,"boolean key")}}function verifier(c){return function(o){return function(e){var i;if("object"!==(void 0===e?"undefined":_typeof(e))||null===e)return"object expected";var r,t={};c.oneofsArray.length&&(r={});for(var n=0;n<c.fieldsArray.length;++n){var a=c._fieldsArray[n].resolve(),f=e[a.name];if(!a.optional||null!=f&&e.hasOwnProperty(a.name))if(a.map){if(!util.isObject(f))return invalid(a,"object");for(var u=Object.keys(f),s=0;s<u.length;++s){if(i=verifyKey(a,u[s]))return i;if(i=verifyValue(a,n,f[u[s]],o))return i}}else if(a.repeated){if(!Array.isArray(f))return invalid(a,"array");for(s=0;s<f.length;++s)if(i=verifyValue(a,n,f[s],o))return i}else{if(a.partOf){var l=a.partOf.name;if(1===t[a.partOf.name]&&1===r[l])return a.partOf.name+": multiple values";r[l]=1}if(i=verifyValue(a,n,f,o))return i}}}}}(module.exports=verifier)._configure=function(){Enum=require("./enum"),util=require("./util")};